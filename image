import os
from flask import Flask, request, redirect, url_for, render_template
from werkzeug.utils import secure_filename
from keras.applications.resnet50 import ResNet50, preprocess_input, decode_predictions
from keras.preprocessing.image import load_img, img_to_array

# Define the allowed image file extensions
ALLOWED_EXTENSIONS = {'jpg', 'jpeg', 'png', 'gif'}

# Create a Flask app
app = Flask(__name__)

# Load the ResNet50 model
model = ResNet50(weights='imagenet')

# Function to check if the file has an allowed extension
def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

# Route for the home page
@app.route('/', methods=['GET'])
def home():
    return render_template('home.html')

# Route for the image upload page
@app.route('/upload', methods=['GET', 'POST'])
def upload():
    if request.method == 'POST':
        # Check if the file was uploaded
        if 'file' not in request.files:
            return redirect(request.url)
        file = request.files['file']
        # Check if the file has an allowed extension
        if file.filename == '' or not allowed_file(file.filename):
            return redirect(request.url)
        # Save the file to the uploads folder
        filename = secure_filename(file.filename)
        file.save(os.path.join('uploads', filename))
        # Classify the uploaded image
        img = load_img(os.path.join('uploads', filename), target_size=(224, 224))
        x = img_to_array(img)
        x = preprocess_input(x)
        preds = model.predict(x.reshape((1,)+x.shape[:3]))
        preds = decode_predictions(preds, top=5)[0]
        # Display the classification results to the user
        return render_template('result.html', filename=filename, preds=preds)
    # Render the image upload page
    return render_template('upload.html')

if __name__ == '__main__':
    app.run(debug=True)
